(()=>{"use strict";const e=(()=>{function e(e){let t;try{t=window[e];const n="__storage_test__";return t.setItem(n,n),t.removeItem(n),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}return{session:(()=>{let n=JSON.parse(sessionStorage.getItem("orderItemList"))||[];const s=e=>{n=e,e&&e.length>0?sessionStorage.setItem("orderItemList",JSON.stringify(e)):sessionStorage.setItem("orderItemList",JSON.stringify([]))};return{addOrderItem:t=>{e("sessionStorage")&&(n.push(t.outerHTML),s(n))},removeOrderItem:t=>{if(e("sessionStorage")){const e=n.filter((e=>{const n=e.match(/data-menu-item="([^"]+)"/)[1];if(t!=n)return e}));s(e)}},removeAllOrderItems:()=>{n=[],s()},loadOrderItemList:()=>{if(e("sessionStorage")&&null!=n&&n!=[])for(let e of n){const n=document.createElement("div");n.innerHTML=e,t.orderAside.loadOrder(n.firstChild,!0)}}}})()}})(),t=(()=>{const t=document.querySelector(".content"),n=(e,t,n)=>{const s=Array.from(e);s.forEach((e=>e.addEventListener("click",(()=>{s.forEach((e=>e.classList.remove(t))),e.classList.add(t),void 0!==n&&n(e)}))))},s=e=>{for(;e.lastChild;)e.lastChild.remove()},a=e=>{const t=document.createElement("div");return t.classList.add(e),t},r=()=>{const e=e=>{if(void 0===e){e=JSON.parse(sessionStorage.getItem("tableId"))||"not selected"}document.querySelector(".table-selection").innerText=e,document.querySelector(".table-order").innerText=e,sessionStorage.setItem("tableId",e)},r=a=>{s(l),l.innerHTML=`<div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>\n            <div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>\n            <div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>\n            <div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>\n            <div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>\n            <div class="table">\n                <img class="restaurant-table table-${++a}" src="./images/table.svg" alt="Image of a restaurant table">\n                <p class="restaurant-text">T${a}</p>\n            </div>`,t.appendChild(l),o(),n(document.querySelectorAll(".restaurant-table"),"table-clicked",(t=>{const n=t.classList[1].split("-")[1];e(n)}))},o=n=>{s(c),c.innerHTML='<div class="order-icons">\n                <img class="table-image" src="./images/small table icon.svg" alt="">\n                <p class="table-text">TABLE:</p>\n                <p class="table-count table-selection"></p>\n            </div>\n            <button id="selection-btn">SELECT AND CONTINUE</button>',t.appendChild(c),e(n),i()},i=()=>{document.getElementById("selection-btn").addEventListener("click",(()=>{"not selected"!=document.querySelector(".table-selection").innerText?document.getElementById("MENU").click():alert("Select a table.")}))};s(t);const d=a("name-top");d.innerHTML='<p>TABLE LIST</p>\n            <div class="buttons">\n            <button class="floor-btn floor-1 floor-btn-clicked">First Floor</button>\n            <button class="floor-btn floor-2">Second Floor</button>\n            </div>',t.appendChild(d),n(document.querySelectorAll(".floor-btn"),"floor-btn-clicked",(e=>{const t=e.classList.contains("floor-1")?0:6;r(t)}));const l=a("tables"),c=a("selection");r(0)},o=(e,t,n,s,a)=>({name:e.toUpperCase(),category:t,spiciness:n,imgLink:s,price:a}),i={STARTER:{item1:o("chicken wings","N",2,"./images/chickenWing.jpg",23),item2:o("french fries","G",0,"./images/frenchFry.jpg",23),item3:o("glass meat","G",2,"./images/glassMeat.jpg",23),item4:o("glass meat","G",1,"./images/idkBread.jpg",23),item5:o("summer salad","N",1,"./images/summerSalad.jpg",23),item7:o("summer salad","0%",1,"./images/summerSalad.jpg",23),item6:o("chicken wings","G",2,"./images/idkBread.jpg",19)},"MAIN COURSE":{item8:o("summer salad","N",1,"./images/summerSalad.jpg",23),item9:o("summer salad","0%",1,"./images/summerSalad.jpg",23),item10:o("chicken wings","G",2,"./images/idkBread.jpg",23)},DRINKS:{item11:o("bread","G",2,"./images/ikBread.jpg",23),item12:o("glass meat","G",2,"./images/glassMeat.jpg",23),item13:o("summer salad","N",1,"./images/summerSalad.jpg",23),item14:o("summer salad","0%",1,"./images/summerSalad.jpg",23),item15:o("chicken wings","G",2,"./images/idkBread.jpg",23)},DESSERTS:{item8:o("glass meat","G",2,"./images/glassMeat.jpg",23),item9:o("glass meat","G",1,"./images/idkBread.jpg",23),item3:o("summer salad","N",1,"./images/summerSalad.jpg",23),item4:o("summer salad","0%",1,"./images/summerSalad.jpg",23)}},d=()=>{const e=(e="STARTER")=>{const t=i[e];for(let n in t){const s=a("food-item-container"),o=t[n];let i="";for(let e=0;e<o.spiciness;e++)i+='<img src="./images/chilli.svg">';s.innerHTML=`<div class="food-card" data-menu-list="${e}" data-menu-item="${n}">\n                        <div class="food-img">\n                            <img src="${o.imgLink}">\n                        </div>\n                        <div class="food-info">\n                            <p class="food-name">${o.name}</p>\n                            <div class="food-category-container">\n                                <p class="food-category-text">CATEGORY:</p>\n                                <div class="food-category-icons">${o.category}\n                                    <div>\n                                        ${i}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>`,r.appendChild(s)}document.querySelectorAll(".food-card").forEach((e=>{e.addEventListener("click",(()=>l.loadOrder(e,!1)))}))},r=a("food-content");t.appendChild(r),e();const o=a("food-footer");t.appendChild(o),(()=>{const t=["STARTER","MAIN COURSE","DRINKS","DESSERTS"];for(let e in t){const n=document.createElement("button");n.classList.add("food-footer-btn"),"STARTER"===t[e]&&n.classList.add("food-footer-btn-active"),n.innerText=t[e],o.appendChild(n)}n(document.querySelectorAll(".food-footer-btn"),"food-footer-btn-active",(t=>{s(r),e(t.innerText)}))})()},l=(()=>{const t=document.querySelector(".order-content"),n=a("order-content-items"),r=a("order-content-price");let o={},d=0;return{loadOrder:(l,m)=>{const u=i[l.dataset.menuList][l.dataset.menuItem],g=l.dataset.menuItem,p=u.name,v=u.price,b=u.imgLink;m||e.session.addOrderItem(l),document.querySelector(".order-content-empty")&&(s(t),t.appendChild(n),t.appendChild(r));const f=()=>{const a=+(.1*d).toFixed(2);r.innerHTML=`\n                <div class="order-content-price-info">\n                    <div>\n                        <p class="order-content-price-info-text">SUBTOTAL</p>\n                        <p class="order-content-price-info-text">${d}</p>\n                    </div>\n                    <div>\n                        <p class="order-content-price-info-text">SERVICE CHARGE <span class="order-content-price-info-surcharge">10%</span></p>\n                        <p class="order-content-price-info-text">${a}</p>\n                    </div>\n                </div>\n                <div class="order-content-price-interact">\n                    <div class="order-content-price-interact-info">\n                        <p class="order-content-price-interact-info-text">TOTAL</p>\n                        <p class="order-content-price-interact-info-text">${d+a}</p>\n                    </div>\n                    <div class="order-content-price-interact-buttons">\n                        <button class="order-cancel">CANCEL ORDER</button>\n                        <button class="order-send">SEND ORDER</button>\n                    </div>\n                </div>\n                `,document.querySelector(".order-cancel").addEventListener("click",(()=>{s(t),s(n),s(r),d=0,o={},c.orderEmpty(),console.log("cleared"),e.session.removeAllOrderItems()}))};o[g]?(o[g]++,d+=v,document.querySelector(`[data-id=${l.dataset.menuItem}]`).querySelector(".order-item-quantity-text").innerText=o[g],f()):(o[g]=1,(()=>{console.log("ADDED"),d+=v;const r=a("background-blur");r.dataset.id=g,r.dataset.price=v,r.innerHTML=`\n                <div class="order-item">\n                    <div class="order-item-content">\n                        <img src="${b}" alt="">\n                        <div class="order-item-content-info">\n                            <p class="order-item-text">${p}</p>\n                            <p class="order-item-content-price">$${v}</p>\n                        </div>\n                    </div>\n                    <div class="order-item-quantity">\n                        <p class="order-item-text">QUANTITY</p>\n                        <p class="order-item-quantity-text">${o[g]}</p>\n                    </div>\n                </div>\n                <button class="order-remove">REMOVE</button>\n                `,n.appendChild(r),f(),(()=>{const a=r.querySelector(".order-remove"),i=((()=>{const e=r.querySelector(".order-item").classList;a.addEventListener("mouseenter",(()=>e.add("order-item-blurred"))),a.addEventListener("mouseleave",(()=>e.remove("order-item-blurred")))})(),()=>{a.classList.add("order-remove-visible"),console.log("visible")}),l=()=>{a.classList.remove("order-remove-visible"),console.log("invisible")};r.addEventListener("mouseenter",(()=>i())),r.addEventListener("focus",(()=>i())),r.addEventListener("mouseleave",(()=>l())),r.addEventListener("focusout",(()=>l())),a.addEventListener("click",(()=>{(a=>{const r=a.dataset.id;d-=a.dataset.price*o[r],delete o[r],n.removeChild(a),e.session.removeOrderItem(r),0==document.querySelectorAll(".order-item").length&&(s(t),c.orderEmpty())})(r)}))})()})())}}})(),c={menuBtns(){const e=document.querySelectorAll(".menu-item");n(e,"menu-item-active",(e=>{const n={HOME:r,MENU:d};s(t),n[e.id]()}))},homePage(){s(t),r()},orderEmpty(){const e=document.querySelector(".order-content"),t=a("order-content-empty");t.innerHTML='\n                <img src="images/order.svg" alt="">\n                <p class="order-empty-text">NO PRODUCTS ADDED</p>\n                ',e.appendChild(t)},date(){const e=document.getElementById("date-text"),t=()=>{let t=new Date,n=t.getMonth()+1;n<10&&(n="0"+n.toString());let s=t.getDate(),a=t.getFullYear(),r=t.getHours(),o=t.getMinutes();e.innerText=`${n}-${s}-${a}, ${r}:${o}`};t(),setInterval((()=>t()),1e3)}};return{load:c,orderAside:l}})();t.load.menuBtns(),t.load.homePage(),t.load.date(),t.load.orderEmpty(),e.session.loadOrderItemList()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,